{
  
    
        "post0": {
            "title": "When to use aggreagate/filter/transform with pandas",
            "content": "I&#39;ve been teaching quite a lot of Pandas recently, and a lot of the recurring questions are about grouping. That&#39;s no surprise, as it&#39;s one of the most flexible features of Pandas. However, that flexibility also makes it sometimes confusing. . I think that most of the confusion arises because the same grouping logic is used for (at least) three distinct operations in Pandas. In the order that we normally learn them, these are: . calculating some aggregate measurement for each group (size, mean, etc.) | filtering the rows on a property of the group they belong to | calculating a new value for each row based on a property of the group. | . This leads commonly to situations where we know that we need to use groupby() - and may even be able to easily figure out what the arguments to groupby() should be - but are unsure about what to do next. . Here&#39;s a trick that I&#39;ve found useful when teaching these ideas: think about the result you want, and work back from there. If you want to get a single value for each group, use aggregate() (or one of its shortcuts). If you want to get a subset of the original rows, use filter(). And if you want to get a new value for each original row, use transpose(). . Here&#39;s a minimal example of the three different situations, all of which require exactly the same call to groupby() but which do different things with the result. We&#39;ll use the well known tips dataset which we can load directly from the web: . import pandas as pd df = pd.read_csv(&quot;https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv&quot;) pd.options.display.max_rows = 10 df . total_bill tip sex smoker day time size . 0 16.99 | 1.01 | Female | No | Sun | Dinner | 2 | . 1 10.34 | 1.66 | Male | No | Sun | Dinner | 3 | . 2 21.01 | 3.50 | Male | No | Sun | Dinner | 3 | . 3 23.68 | 3.31 | Male | No | Sun | Dinner | 2 | . 4 24.59 | 3.61 | Female | No | Sun | Dinner | 4 | . ... ... | ... | ... | ... | ... | ... | ... | . 239 29.03 | 5.92 | Male | No | Sat | Dinner | 3 | . 240 27.18 | 2.00 | Female | Yes | Sat | Dinner | 2 | . 241 22.67 | 2.00 | Male | Yes | Sat | Dinner | 2 | . 242 17.82 | 1.75 | Male | No | Sat | Dinner | 2 | . 243 18.78 | 3.00 | Female | No | Thur | Dinner | 2 | . 244 rows × 7 columns . If you&#39;re not familiar with this dataset, all you need to know is that each row represents a meal at a restaurant, and the columns store the value of the total bill and the tip, plus some metadata about the customer - their sex, whether or not they were a smoker, what day and time they ate at, and the size of their party. Also, notice that we have 244 rows - this will be important later on. . What was the average total bill on each day? . To answer this, let&#39;s imagine that we have already figured out that we need to group by day: . df.groupby(&#39;day&#39;) . now what&#39;s the next step? Use the trick that I just described and start by imagining what we want the output to look like. We want a single value for each group, so we need to use aggregate(): . df.groupby(&#39;day&#39;).aggregate(&#39;mean&#39;) . total_bill tip size . day . Fri 17.151579 | 2.734737 | 2.105263 | . Sat 20.441379 | 2.993103 | 2.517241 | . Sun 21.410000 | 3.255132 | 2.842105 | . Thur 17.682742 | 2.771452 | 2.451613 | . We&#39;re only interested in the total_bill column, so we can select it (either before or after we do the aggregation): . df.groupby(&#39;day&#39;)[&#39;total_bill&#39;].aggregate(&#39;mean&#39;) . day Fri 17.151579 Sat 20.441379 Sun 21.410000 Thur 17.682742 Name: total_bill, dtype: float64 . Pandas has lots of shortcuts for the various ways to aggregate group values - we could use mean() here instead: . df.groupby(&#39;day&#39;)[&#39;total_bill&#39;].mean() . day Fri 17.151579 Sat 20.441379 Sun 21.410000 Thur 17.682742 Name: total_bill, dtype: float64 . Which meals were eaten on days where the average bill was greater than 20? . For this question, think again about the output we want - our goal here is to get a subset of the original rows, so this is a job for filter(). The argument to filter() must be a function or lambda that will take a group and return True or False to determine whether rows belonging to that group should be included in the output. Here&#39;s how we might do it with a lambda: . df.groupby(&#39;day&#39;).filter(lambda x : x[&#39;total_bill&#39;].mean() &gt; 20) . total_bill tip sex smoker day time size . 0 16.99 | 1.01 | Female | No | Sun | Dinner | 2 | . 1 10.34 | 1.66 | Male | No | Sun | Dinner | 3 | . 2 21.01 | 3.50 | Male | No | Sun | Dinner | 3 | . 3 23.68 | 3.31 | Male | No | Sun | Dinner | 2 | . 4 24.59 | 3.61 | Female | No | Sun | Dinner | 4 | . ... ... | ... | ... | ... | ... | ... | ... | . 238 35.83 | 4.67 | Female | No | Sat | Dinner | 3 | . 239 29.03 | 5.92 | Male | No | Sat | Dinner | 3 | . 240 27.18 | 2.00 | Female | Yes | Sat | Dinner | 2 | . 241 22.67 | 2.00 | Male | Yes | Sat | Dinner | 2 | . 242 17.82 | 1.75 | Male | No | Sat | Dinner | 2 | . 163 rows × 7 columns . Notice that our output dataframe has only 163 rows (compared to the 244 that we started with), and that the columns are exactly the same as the input. . Compared to our first example, it&#39;s a bit harder to see why this is useful - typically we&#39;ll do a filter like this and then follow it up with another operation. For example, we might want to compare the average party size on days where the average bill is high: . # surrounding parens let us split the different parts of the expression # over multiple lines ( df .groupby(&#39;day&#39;) .filter( lambda x : x[&#39;total_bill&#39;].mean() &gt; 20) [&#39;size&#39;] .mean() ) . 2.668711656441718 . with the average party size on days where the average bill is low: . ( df .groupby(&#39;day&#39;) .filter(lambda x : x[&#39;total_bill&#39;].mean() &lt;= 20) [&#39;size&#39;] .mean() ) . 2.3703703703703702 . Incidentally, a question that I&#39;m often asked is what the type of the argument to the lambda is - what actually is the variable x in our examples above? We can find out by passing a lambda that just prints the type of its input: . df.groupby(&#39;day&#39;).filter(lambda x: print(type(x))) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; . total_bill tip sex smoker day time size . And we see that each group is passed to our lambda function as a Pandas DataFrame, so we already know how to use it. . How did the cost of each meal compare to the average for the day? . This last example is the trickiest to understand, but remember our trick - start by thinking about the desired output. In this case we are trying to generate a new value for each input row - the total bill divided by the average total bill for each day. (If you have a scientific or maths background then you might think of this as a normalized or scaled total bill). To make a new value for each row, we use transform(). . To start with, let&#39;s see what happens when we pass in a lambda to transform() that just gives us the mean of its input: . df.groupby(&#39;day&#39;).transform(lambda x : x.mean()) . total_bill tip size . 0 21.410000 | 3.255132 | 2.842105 | . 1 21.410000 | 3.255132 | 2.842105 | . 2 21.410000 | 3.255132 | 2.842105 | . 3 21.410000 | 3.255132 | 2.842105 | . 4 21.410000 | 3.255132 | 2.842105 | . ... ... | ... | ... | . 239 20.441379 | 2.993103 | 2.517241 | . 240 20.441379 | 2.993103 | 2.517241 | . 241 20.441379 | 2.993103 | 2.517241 | . 242 20.441379 | 2.993103 | 2.517241 | . 243 17.682742 | 2.771452 | 2.451613 | . 244 rows × 3 columns . Notice that we get the same number of output rows as input rows - Pandas has calculated the mean for each group, then used the results as the new values for each row. We&#39;re only interested in the total bill, so let&#39;s get rid of the other columns: . df.groupby(&#39;day&#39;)[&#39;total_bill&#39;].transform(lambda x : x.mean()) . 0 21.410000 1 21.410000 2 21.410000 3 21.410000 4 21.410000 ... 239 20.441379 240 20.441379 241 20.441379 242 20.441379 243 17.682742 Name: total_bill, Length: 244, dtype: float64 . This gives us a series with the same number of rows as our input data. We could assign this to a new column in our dataframe: . df[&#39;day_average&#39;] = df.groupby(&#39;day&#39;)[&#39;total_bill&#39;].transform(lambda x : x.mean()) df . total_bill tip sex smoker day time size day_average . 0 16.99 | 1.01 | Female | No | Sun | Dinner | 2 | 21.410000 | . 1 10.34 | 1.66 | Male | No | Sun | Dinner | 3 | 21.410000 | . 2 21.01 | 3.50 | Male | No | Sun | Dinner | 3 | 21.410000 | . 3 23.68 | 3.31 | Male | No | Sun | Dinner | 2 | 21.410000 | . 4 24.59 | 3.61 | Female | No | Sun | Dinner | 4 | 21.410000 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 239 29.03 | 5.92 | Male | No | Sat | Dinner | 3 | 20.441379 | . 240 27.18 | 2.00 | Female | Yes | Sat | Dinner | 2 | 20.441379 | . 241 22.67 | 2.00 | Male | Yes | Sat | Dinner | 2 | 20.441379 | . 242 17.82 | 1.75 | Male | No | Sat | Dinner | 2 | 20.441379 | . 243 18.78 | 3.00 | Female | No | Thur | Dinner | 2 | 17.682742 | . 244 rows × 8 columns . Which would allow us to calculate the scaled total bills: . df[&#39;total_bill&#39;] / df[&#39;day_average&#39;] . 0 0.793554 1 0.482952 2 0.981317 3 1.106025 4 1.148529 ... 239 1.420159 240 1.329656 241 1.109025 242 0.871761 243 1.062052 Length: 244, dtype: float64 . But we could also calculate the scaled bill as part of the transform: . df[&#39;scaled bill&#39;] = df.groupby(&#39;day&#39;)[&#39;total_bill&#39;].transform(lambda x : x/x.mean()) df.head() . total_bill tip sex smoker day time size day_average scaled bill . 0 16.99 | 1.01 | Female | No | Sun | Dinner | 2 | 21.41 | 0.793554 | . 1 10.34 | 1.66 | Male | No | Sun | Dinner | 3 | 21.41 | 0.482952 | . 2 21.01 | 3.50 | Male | No | Sun | Dinner | 3 | 21.41 | 0.981317 | . 3 23.68 | 3.31 | Male | No | Sun | Dinner | 2 | 21.41 | 1.106025 | . 4 24.59 | 3.61 | Female | No | Sun | Dinner | 4 | 21.41 | 1.148529 | . In conclusion . All of our three examples used exactly the same groupby() call to begin with: . df.groupby(&#39;day&#39;)[&#39;total_bill&#39;].mean() df.groupby(&#39;day&#39;).filter(lambda x : x[&#39;total_bill&#39;].mean() &gt; 20) df.groupby(&#39;day&#39;)[&#39;total_bill&#39;].transform(lambda x : x/x.mean()) . but by doing different things with the resulting groups we get very different outputs. To reiterate: . if we want to get a single value for each group -&gt; use aggregate() | if we want to get a subset of the input rows -&gt; use filter() | if we want to get a new value for each input row -&gt; use transform() | .",
            "url": "https://mojones.github.io/dfd_jupyter_test/pandas/grouping/2020/10/26/pandas-groupby-transform-aggregate-filter.html",
            "relUrl": "/pandas/grouping/2020/10/26/pandas-groupby-transform-aggregate-filter.html",
            "date": " • Oct 26, 2020"
        }
        
    
  
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mojones.github.io/dfd_jupyter_test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mojones.github.io/dfd_jupyter_test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mojones.github.io/dfd_jupyter_test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mojones.github.io/dfd_jupyter_test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}